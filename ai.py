import math
import core

def available_policy(board):
    return [x for x in range(9) if board[x]==0]
"""
def util(board,label,decay_rate = 0.7):
    (has_empty,winner)=core.get_game_state(board)
    accu_util = winner*10
    if (has_empty and winner == 0):
        possible_policies =available_policy(board)
        for policy in possible_policies:
            image_board = core.apply_policy(board,policy,label)
            accu_util+=decay_rate*util(image_board,-label)
    return accu_util


"""
def best_policy_and_util(board,label):
    possible_policies =available_policy(board)
    best_policy = core.INIT_POLICY
    
    (has_empty,winner)=core.get_game_state(board)
    max_util = core.INIT_MAX_UTIL
    if (has_empty and winner == 0 ):
        
        for policy in possible_policies:
            image_board = core.apply_policy(board,policy,label)
            (_ , r) = worst_policy_and_util(image_board,-label)
            if(r>max_util):
                best_policy = policy
                max_util=r
    else:
        max_util = winner*10
    return (best_policy,max_util)

def worst_policy_and_util(board,label):
    possible_policies = available_policy(board)
    worst_policy = core.INIT_POLICY
    
    (has_empty,winner)=core.get_game_state(board)
    min_util = core.INIT_MIN_UTIL
    if (has_empty and winner == 0 ):
        
        for policy in possible_policies:
            image_board = core.apply_policy(board,policy,label)
            (_ , temp_util) =best_policy_and_util(image_board,-label)
            if(temp_util<min_util):
                worst_policy = policy
                min_util=temp_util
    else:
        min_util = winner*10
        
    return (worst_policy,min_util)

def minimax_decision(board):
    """
    Returns the action that gives the maximum utility

    Parameters:
    board (list): A list of size 9 representing the game board

    Returns:
    int: a value from 0 - 9 representing the position on the game board that gives the max utility
    """
    action_max = 0
    utility_max = min_utility(board)
    i = 0
    for action in range(1, 9):
        curr_min_utility = min_utility(core.apply_policy(board, i, 1))
        if curr_min_utility > utility_max:
            utility_max = curr_min_utility
            action_max = action
    return action_max
    

def max_utility(board):
    """
    Returns the max utility value given a board

    Parameters:
    board (list): A list of size 9 representing the game board in finished state

    Returns:
    int: the maximum utility values generated by possible plies
    """
    state = core.get_game_state(board)
    if state[0] != 1 or state[1] != 0:
        return utility(board)
    else:
        value = -math.inf
        for action in available_policy(board):
            value = max(value, min_utility(core.apply_policy(board, action, 1)))
        return value

def min_utility(board):
    """
    Returns the min utility value given a board

    Parameters:
    board (list): A list of size 9 representing the game board in finished state

    Returns:
    int: the maximum utility values generated by possible plies
    """
    state = core.get_game_state(board)
    if state[0] != 1 or state[1] != 0:
        return utility(board)
    else:
        value = math.inf
        for action in available_policy(board):
            value = min(value, max_utility(core.apply_policy(board, action, -1)))
        return value

def utility(board):
    """
    Returns the utility value of the board given a finished board

    Parameters:
    board (list): A list of size 9 representing the game board in finished state

    Returns:
    int: 10 if the first hand wins, -10 if the last hand wins
         0 if it's a time
    """
    state = core.get_game_state(board)
    if state[1] == 1:
        return 10
    elif state[1] == -1:
        return -10
    else:
        return 0
